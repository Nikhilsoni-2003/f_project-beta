AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Social Media Application

Parameters:
  CognitoUserPoolId:
    Type: String
    Default: eu-north-1_RFZvLrDd9
  CognitoClientId:
    Type: String
    Default: 7p0e3uioc8mtq69m4qq12540mn
  S3BucketName:
    Type: String
    Default: serverless-social-media-storage-123
  CloudFrontDomain:
    Type: String
    Default: dsvtq5o5a0ykh.cloudfront.net
  Environment:
    Type: String
    Default: prod

Conditions:
  IsLocal: !Equals [!Ref Environment, "local"]

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    Environment:
      Variables:
        COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
        COGNITO_CLIENT_ID: !Ref CognitoClientId
        S3_BUCKET_NAME: !Ref S3BucketName
        CLOUDFRONT_DOMAIN: !Ref CloudFrontDomain
        USERS_TABLE: Users
        POSTS_TABLE: Posts
        LOOPS_TABLE: Loops
        STORIES_TABLE: Stories
        MESSAGES_TABLE: Messages
        CONVERSATIONS_TABLE: Conversations
        NOTIFICATIONS_TABLE: Notifications
        CONNECTIONS_TABLE: Connections

Resources:
  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: !Sub https://dsvtq5o5a0ykh.cloudfront.net
        AllowCredentials: true
      Auth:
        DefaultAuthorizer: !If [IsLocal, MockAuthorizer, CognitoUserPoolAuthorizer]
        Authorizers:
          CognitoUserPoolAuthorizer:
            UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}
          MockAuthorizer:
            FunctionArn: !GetAtt MockAuthorizer.Arn

  # Mock Authorizer for Local Testing
  MockAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: mock/
      Handler: mockAuthorizer.handler
      Runtime: nodejs18.x

  # Auth Functions (No Auth Required)
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/auth/
      Handler: index.handler
      Events:
        SignUp:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/auth/signup
            Method: post
            Auth:
              Authorizer: NONE
        SignIn:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/auth/signin
            Method: post
            Auth:
              Authorizer: NONE
        SignOut:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/auth/signout
            Method: get
            Auth:
              Authorizer: NONE
        ForgotPassword:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/auth/forgot-password
            Method: post
            Auth:
              Authorizer: NONE
        ResetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/auth/reset-password
            Method: post
            Auth:
              Authorizer: NONE
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users/index/*'
            - Effect: Allow
              Action:
                - cognito-idp:*
              Resource: '*'

  # User Functions
  UserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/user/
      Handler: index.handler
      Events:
        GetCurrentUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/user/current
            Method: get
        GetProfile:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/user/getProfile/{userName}
            Method: get
        EditProfile:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/user/editProfile
            Method: post
        Follow:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/user/follow/{userId}
            Method: get
        GetSuggested:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/user/suggested
            Method: get
        Search:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/user/search
            Method: get
        GetFollowing:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/user/followingList
            Method: get
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users/index/*'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Posts'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Posts/index/*'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Notifications'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Notifications/index/*'
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
              Resource: !Sub 'arn:aws:s3:::${S3BucketName}/*'

  # Post Functions
  PostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/post/
      Handler: index.handler
      Events:
        Upload:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/post/upload
            Method: post
        GetAll:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/post/getAll
            Method: get
        Like:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/post/like/{postId}
            Method: get
        Comment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/post/comment/{postId}
            Method: post
        Saved:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/post/saved/{postId}
            Method: get
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Posts'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Posts/index/*'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users/index/*'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Notifications'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Notifications/index/*'
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
              Resource: !Sub 'arn:aws:s3:::${S3BucketName}/*'

  # Loop Functions
  LoopFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/loop/
      Handler: index.handler
      Events:
        Upload:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/loop/upload
            Method: post
        GetAll:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/loop/getAll
            Method: get
        Like:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/loop/like/{loopId}
            Method: get
        Comment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/loop/comment/{loopId}
            Method: post
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Loops'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Loops/index/*'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users/index/*'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Notifications'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Notifications/index/*'

  # Story Functions
  StoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/story/
      Handler: index.handler
      Events:
        Upload:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/story/upload
            Method: post
        GetAll:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/story/getAll
            Method: get
        GetByUserName:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/story/getByUserName/{userName}
            Method: get
        View:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/story/view/{storyId}
            Method: get
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Stories'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Stories/index/*'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users/index/*'

  # Message Functions
  MessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/message/
      Handler: index.handler
      Events:
        Send:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/message/send/{userId}
            Method: post
        GetAll:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/message/getAll/{userId}
            Method: get
        GetPrevChats:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/message/prevChats
            Method: get
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Messages'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Messages/index/*'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Conversations'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Conversations/index/*'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users/index/*'

  # Notification Functions
  NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/notification/
      Handler: index.handler
      Events:
        GetAll:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/user/getAllNotifications
            Method: get
        MarkAsRead:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/user/markAsRead
            Method: post
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Notifications'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Notifications/index/*'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users/index/*'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Posts'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Posts/index/*'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Loops'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Loops/index/*'

  # Media Functions
  MediaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/media/
      Handler: index.handler
      Events:
        GetPresignedUrl:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/media/presigned-url
            Method: post
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
                - s3:GetSignedUrl
              Resource: !Sub 'arn:aws:s3:::${S3BucketName}/*'

  # WebSocket API
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: SocialMediaWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  # WebSocket Functions
  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/websocket/
      Handler: connect.handler
      Environment:
        Variables:
          WEBSOCKET_API_ID: !Ref WebSocketApi
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Connections'

  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/websocket/
      Handler: disconnect.handler
      Environment:
        Variables:
          WEBSOCKET_API_ID: !Ref WebSocketApi
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Connections'

  WebSocketMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/functions/websocket/
      Handler: message.handler
      Environment:
        Variables:
          WEBSOCKET_API_ID: !Ref WebSocketApi
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource: 
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Connections'
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

  # WebSocket Routes
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Sub 'integrations/${ConnectIntegration}'

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub 'integrations/${DisconnectIntegration}'

  MessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: message
      AuthorizationType: NONE
      Target: !Sub 'integrations/${MessageIntegration}'

  # WebSocket Integrations
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations'

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Arn}/invocations'

  MessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketMessageFunction.Arn}/invocations'

  # WebSocket Deployment
  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - MessageRoute
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      DeploymentId: !Ref WebSocketDeployment
      StageName: prod

  # Lambda Permissions for WebSocket
  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketConnectFunction
      Principal: apigateway.amazonaws.com

  WebSocketDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketDisconnectFunction
      Principal: apigateway.amazonaws.com

  WebSocketMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketMessageFunction
      Principal: apigateway.amazonaws.com

Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'
  
  WebSocketUrl:
    Description: WebSocket API endpoint URL
    Value: !Sub 'wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-WebSocketUrl'

  WebSocketApiId:
    Description: WebSocket API ID
    Value: !Ref WebSocketApi
    Export:
      Name: !Sub '${AWS::StackName}-WebSocketApiId'